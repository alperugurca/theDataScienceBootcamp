# -*- coding: utf-8 -*-
"""10-Big-Data-Machine-Learning-Classification-with-Spark.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LLGv26DhAzmrN2t6c3dlkqBksxq1PATk

# Spark Kullanarak

## Gerekli Kütüphaneler

"""

!pip install pyspark
from pyspark.sql import SparkSession
from pyspark.ml.feature import VectorAssembler # Yazıları Vektöre Dönüştürme
from pyspark.ml.classification import LogisticRegression # LogisticRegression import
from pyspark.ml.evaluation import BinaryClassificationEvaluator # Sonuç ikili olduğu için
from pyspark.ml.evaluation import MulticlassClassificationEvaluator

"""## **1. Spark Oturumu Oluşturma**"""

spark = SparkSession.builder.appName('churn').getOrCreate()  # Spark oturumu oluşturma

"""## **2. Veri Yükleme**"""

data = spark.read.csv('/content/churn.csv', inferSchema=True, header=True)  # CSV dosyasını okuma ve Spark DataFrame'ine dönüştürme

"""## **3. Özellik Mühendisliği**"""

# "Names" sütununu çıkar ve sayısal özellikleri seç
feature_columns = [col for col in data.columns if col not in ["Names", "Churn"]]  # "Names" ve "Churn" dışındaki tüm sütunları seç
assembler = VectorAssembler(inputCols=feature_columns, outputCol='features')  # Seçilen sütunları birleştirmek için VectorAssembler oluştur
data = assembler.transform(data).select('features', 'Churn')  # Veriyi dönüştür ve sadece 'features' ve 'Churn' sütunlarını seç

"""## **4. Veri Bölme**"""

# Veri bölme
train_data, test_data = data.randomSplit([0.80,0.2], seed=42)  # Veriyi %80 eğitim, %20 test olarak böl

"""## **5. Model Eğitimi**"""

# Model eğitimi
lr = LogisticRegression(labelCol='Churn', featuresCol='features')  # Lojistik Regresyon modelini tanımla
model = lr.fit(train_data)  # Modeli eğitim verisi üzerinde eğit

"""## **6. Tahmin Yapma**"""

# Tahmin yapma
predictions = model.transform(test_data)  # Test verisi üzerinde tahminler yap

"""## **7. Model Değerlendirme Hazırlığı**"""

# Model değerlendirme
from pyspark.ml.evaluation import BinaryClassificationEvaluator, MulticlassClassificationEvaluator  # Değerlendirme metriklerini içe aktar

# Mevcut değerlendirici
binary_evaluator = BinaryClassificationEvaluator(labelCol='Churn')  # İkili sınıflandırma değerlendiricisi oluştur
auc = binary_evaluator.evaluate(predictions)  # AUC skorunu hesapla

# Ek metrikler için yeni değerlendirici
multi_evaluator = MulticlassClassificationEvaluator(labelCol='Churn', metricName='f1')  # Çok sınıflı değerlendirici oluştur
f1 = multi_evaluator.evaluate(predictions)  # F1 skorunu hesapla

print(f"AUC: {auc}")  # AUC skorunu yazdır
print(f"F1 Score: {f1}")  # F1 skorunu yazdır

# Confusion Matrix
tp = predictions.filter((predictions.Churn == 1) & (predictions.prediction == 1)).count()  # Doğru pozitif sayısını hesapla
tn = predictions.filter((predictions.Churn == 0) & (predictions.prediction == 0)).count()  # Doğru negatif sayısını hesapla
fp = predictions.filter((predictions.Churn == 0) & (predictions.prediction == 1)).count()  # Yanlış pozitif sayısını hesapla
fn = predictions.filter((predictions.Churn == 1) & (predictions.prediction == 0)).count()  # Yanlış negatif sayısını hesapla

print(f"Confusion Matrix:")  # Karışıklık matrisini yazdır
print(f"TN: {tn}, FP: {fp}")
print(f"FN: {fn}, TP: {tp}")

# Precision, Recall hesaplama
precision = tp / (tp + fp)  # Kesinlik (precision) hesapla
recall = tp / (tp + fn)  # Duyarlılık (recall) hesapla

print(f"Precision: {precision}")  # Kesinlik değerini yazdır
print(f"Recall: {recall}")  # Duyarlılık değerini yazdır